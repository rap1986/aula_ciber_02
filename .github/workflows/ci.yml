name: CI - Snapshot
run-name: CI ${{ inputs.tipo_versao }} disparada por ${{ github.actor }}

on:   
  # inicia o workflow manualmente
  workflow_dispatch:
    inputs:
      tipo_versao:
        type: choice
        description: 'Tipo de build'     
        required: true
        default: 'snapshot'
        options:
        - snapshot
        - patch
        - minor
        - major
jobs:  
  GerarVersao:
    needs: [Assim,FicaFacil]
    runs-on: ubuntu-latest
    outputs:
      versao: ${{ steps.versao.outputs.versao }}
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Coleta última versão
        id: ultimatag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Número próximas versões
        id: versoes
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.ultimatag.outputs.tag }}
      - name: Versão
        id: versao
        shell: sh
        run: |
          versao=$(
            case "${{ inputs.tipo_versao }}" in
              ("patch") echo "${{ steps.versoes.outputs.patch }}" ;;
              ("minor") echo "${{ steps.versoes.outputs.minor }}" ;;
              ("major") echo "${{ steps.versoes.outputs.major }}" ;;
              ("replace_last") echo "${{ steps.ultimatag.outputs.tag }}" ;;
              ("snapshot") echo "${{ steps.versoes.outputs.minor }}.${{ github.ref_name }}.snapshot" ;;
              (*) echo "${{ steps.versoes.outputs.minor }}.snapshot" ;;
            esac)
          echo "--- Versões ---"
          echo "snapshot=${{ steps.versoes.outputs.minor }}.snapshot_to_ligado"
          echo "patch=${{ steps.versoes.outputs.patch }}_to_ligado"
          echo "minor=${{ steps.versoes.outputs.minor }}_to_ligado"
          echo "major=${{ steps.versoes.outputs.major }}_to_ligado"
          echo "replace_last=${{ steps.ultimatag.outputs.tag }}_to_ligado"
          echo "--- Versão escolhida ---"
          echo "versao=${versao}_to_ligado"
          echo "versao=${versao}_to_ligado" >> "$GITHUB_OUTPUT"
  Assim:
    runs-on: ubuntu-latest
    outputs:
      versao: ${{ steps.versao.outputs.versao }}
    steps:
      - name: Baixando o repositório
        run: echo assim fica facil
  FicaFacil:
    runs-on: ubuntu-latest
    outputs:
      versao: ${{ steps.versao.outputs.versao }}
    steps:
      - name: Baixando o repositório
        run: echo assim fica facil

  build_back:
    name: Build Back
    needs: [GerarVersao]
    runs-on: ubuntu-latest
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build
      - name: Compila o(s) projeto(s)
        shell: bash
        run: |
          cd build/ci_cd_projeto/backend
          npm install
          npm run build
          echo não vai dar certo copiando o projeto errado
      - name: Compacta(Zip) buid
        shell: bash
        run: |
          cd build/ci_cd_projeto/backend
          zip -r backend.zip dist
      - name: Upload Zip Backend
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: build/ci_cd_projeto/backend/backend.zip
  build_front:
    name: Build Front
    needs: [GerarVersao]
    runs-on: ubuntu-latest
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build
      - name: Compila o(s) projeto(s)
        shell: bash
        run: |
          cd build/ci_cd_projeto/frontend
          npm install
          npm run build
      - name: Compacta(Zip) buid
        shell: bash
        run: |
          cd build/ci_cd_projeto/frontend
          zip -r frontend.zip dist
      - name: Upload Zip Frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: build/ci_cd_projeto/frontend/frontend.zip
  empacotar:
    name: Empacotar
    needs: [build_back, build_front, GerarVersao]
    runs-on: ubuntu-latest
    steps:
     - name: Criar Versão / Release e Tag
       uses: softprops/action-gh-release@v2
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         body: Release ${{ needs.GerarVersao.outputs.versao }}
         tag_name: ${{ needs.GerarVersao.outputs.versao }}
         fail_on_unmatched_files: false
         files: backend.zip,frontend.zip
